/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bvakili.portlet.integration.box.model.impl;

import com.bvakili.portlet.integration.box.model.BoxToken;
import com.bvakili.portlet.integration.box.model.BoxTokenModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BoxToken service. Represents a row in the &quot;BoxToken&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bvakili.portlet.integration.box.model.BoxTokenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BoxTokenImpl}.
 * </p>
 *
 * @author Bijan Vakili
 * @see BoxTokenImpl
 * @see com.bvakili.portlet.integration.box.model.BoxToken
 * @see com.bvakili.portlet.integration.box.model.BoxTokenModel
 * @generated
 */
public class BoxTokenModelImpl extends BaseModelImpl<BoxToken>
	implements BoxTokenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a box token model instance should use the {@link com.bvakili.portlet.integration.box.model.BoxToken} interface instead.
	 */
	public static final String TABLE_NAME = "BoxToken";
	public static final Object[][] TABLE_COLUMNS = {
			{ "boxTokenId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "accessToken", Types.VARCHAR },
			{ "refreshToken", Types.VARCHAR },
			{ "accessTokenExpiration", Types.BIGINT },
			{ "refreshTokenExpiration", Types.BIGINT },
			{ "callbackURL", Types.VARCHAR },
			{ "expired", Types.BOOLEAN },
			{ "repositoryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table BoxToken (boxTokenId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,accessToken VARCHAR(75) null,refreshToken VARCHAR(75) null,accessTokenExpiration LONG,refreshTokenExpiration LONG,callbackURL TEXT null,expired BOOLEAN,repositoryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table BoxToken";
	public static final String ORDER_BY_JPQL = " ORDER BY boxToken.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY BoxToken.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bvakili.portlet.integration.box.model.BoxToken"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bvakili.portlet.integration.box.model.BoxToken"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bvakili.portlet.integration.box.model.BoxToken"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long EXPIRED_COLUMN_BITMASK = 2L;
	public static long REPOSITORYID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bvakili.portlet.integration.box.model.BoxToken"));

	public BoxTokenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _boxTokenId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBoxTokenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _boxTokenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BoxToken.class;
	}

	@Override
	public String getModelClassName() {
		return BoxToken.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("boxTokenId", getBoxTokenId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("accessToken", getAccessToken());
		attributes.put("refreshToken", getRefreshToken());
		attributes.put("accessTokenExpiration", getAccessTokenExpiration());
		attributes.put("refreshTokenExpiration", getRefreshTokenExpiration());
		attributes.put("callbackURL", getCallbackURL());
		attributes.put("expired", getExpired());
		attributes.put("repositoryId", getRepositoryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long boxTokenId = (Long)attributes.get("boxTokenId");

		if (boxTokenId != null) {
			setBoxTokenId(boxTokenId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String accessToken = (String)attributes.get("accessToken");

		if (accessToken != null) {
			setAccessToken(accessToken);
		}

		String refreshToken = (String)attributes.get("refreshToken");

		if (refreshToken != null) {
			setRefreshToken(refreshToken);
		}

		Long accessTokenExpiration = (Long)attributes.get(
				"accessTokenExpiration");

		if (accessTokenExpiration != null) {
			setAccessTokenExpiration(accessTokenExpiration);
		}

		Long refreshTokenExpiration = (Long)attributes.get(
				"refreshTokenExpiration");

		if (refreshTokenExpiration != null) {
			setRefreshTokenExpiration(refreshTokenExpiration);
		}

		String callbackURL = (String)attributes.get("callbackURL");

		if (callbackURL != null) {
			setCallbackURL(callbackURL);
		}

		Boolean expired = (Boolean)attributes.get("expired");

		if (expired != null) {
			setExpired(expired);
		}

		Long repositoryId = (Long)attributes.get("repositoryId");

		if (repositoryId != null) {
			setRepositoryId(repositoryId);
		}
	}

	@Override
	public long getBoxTokenId() {
		return _boxTokenId;
	}

	@Override
	public void setBoxTokenId(long boxTokenId) {
		_boxTokenId = boxTokenId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getAccessToken() {
		if (_accessToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessToken;
		}
	}

	@Override
	public void setAccessToken(String accessToken) {
		_accessToken = accessToken;
	}

	@Override
	public String getRefreshToken() {
		if (_refreshToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _refreshToken;
		}
	}

	@Override
	public void setRefreshToken(String refreshToken) {
		_refreshToken = refreshToken;
	}

	@Override
	public long getAccessTokenExpiration() {
		return _accessTokenExpiration;
	}

	@Override
	public void setAccessTokenExpiration(long accessTokenExpiration) {
		_accessTokenExpiration = accessTokenExpiration;
	}

	@Override
	public long getRefreshTokenExpiration() {
		return _refreshTokenExpiration;
	}

	@Override
	public void setRefreshTokenExpiration(long refreshTokenExpiration) {
		_refreshTokenExpiration = refreshTokenExpiration;
	}

	@Override
	public String getCallbackURL() {
		if (_callbackURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _callbackURL;
		}
	}

	@Override
	public void setCallbackURL(String callbackURL) {
		_callbackURL = callbackURL;
	}

	@Override
	public boolean getExpired() {
		return _expired;
	}

	@Override
	public boolean isExpired() {
		return _expired;
	}

	@Override
	public void setExpired(boolean expired) {
		_columnBitmask |= EXPIRED_COLUMN_BITMASK;

		if (!_setOriginalExpired) {
			_setOriginalExpired = true;

			_originalExpired = _expired;
		}

		_expired = expired;
	}

	public boolean getOriginalExpired() {
		return _originalExpired;
	}

	@Override
	public long getRepositoryId() {
		return _repositoryId;
	}

	@Override
	public void setRepositoryId(long repositoryId) {
		_columnBitmask |= REPOSITORYID_COLUMN_BITMASK;

		if (!_setOriginalRepositoryId) {
			_setOriginalRepositoryId = true;

			_originalRepositoryId = _repositoryId;
		}

		_repositoryId = repositoryId;
	}

	public long getOriginalRepositoryId() {
		return _originalRepositoryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BoxToken.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BoxToken toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BoxToken)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BoxTokenImpl boxTokenImpl = new BoxTokenImpl();

		boxTokenImpl.setBoxTokenId(getBoxTokenId());
		boxTokenImpl.setCompanyId(getCompanyId());
		boxTokenImpl.setUserId(getUserId());
		boxTokenImpl.setUserName(getUserName());
		boxTokenImpl.setCreateDate(getCreateDate());
		boxTokenImpl.setModifiedDate(getModifiedDate());
		boxTokenImpl.setAccessToken(getAccessToken());
		boxTokenImpl.setRefreshToken(getRefreshToken());
		boxTokenImpl.setAccessTokenExpiration(getAccessTokenExpiration());
		boxTokenImpl.setRefreshTokenExpiration(getRefreshTokenExpiration());
		boxTokenImpl.setCallbackURL(getCallbackURL());
		boxTokenImpl.setExpired(getExpired());
		boxTokenImpl.setRepositoryId(getRepositoryId());

		boxTokenImpl.resetOriginalValues();

		return boxTokenImpl;
	}

	@Override
	public int compareTo(BoxToken boxToken) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), boxToken.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BoxToken)) {
			return false;
		}

		BoxToken boxToken = (BoxToken)obj;

		long primaryKey = boxToken.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BoxTokenModelImpl boxTokenModelImpl = this;

		boxTokenModelImpl._originalCompanyId = boxTokenModelImpl._companyId;

		boxTokenModelImpl._setOriginalCompanyId = false;

		boxTokenModelImpl._originalExpired = boxTokenModelImpl._expired;

		boxTokenModelImpl._setOriginalExpired = false;

		boxTokenModelImpl._originalRepositoryId = boxTokenModelImpl._repositoryId;

		boxTokenModelImpl._setOriginalRepositoryId = false;

		boxTokenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BoxToken> toCacheModel() {
		BoxTokenCacheModel boxTokenCacheModel = new BoxTokenCacheModel();

		boxTokenCacheModel.boxTokenId = getBoxTokenId();

		boxTokenCacheModel.companyId = getCompanyId();

		boxTokenCacheModel.userId = getUserId();

		boxTokenCacheModel.userName = getUserName();

		String userName = boxTokenCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			boxTokenCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			boxTokenCacheModel.createDate = createDate.getTime();
		}
		else {
			boxTokenCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			boxTokenCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			boxTokenCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		boxTokenCacheModel.accessToken = getAccessToken();

		String accessToken = boxTokenCacheModel.accessToken;

		if ((accessToken != null) && (accessToken.length() == 0)) {
			boxTokenCacheModel.accessToken = null;
		}

		boxTokenCacheModel.refreshToken = getRefreshToken();

		String refreshToken = boxTokenCacheModel.refreshToken;

		if ((refreshToken != null) && (refreshToken.length() == 0)) {
			boxTokenCacheModel.refreshToken = null;
		}

		boxTokenCacheModel.accessTokenExpiration = getAccessTokenExpiration();

		boxTokenCacheModel.refreshTokenExpiration = getRefreshTokenExpiration();

		boxTokenCacheModel.callbackURL = getCallbackURL();

		String callbackURL = boxTokenCacheModel.callbackURL;

		if ((callbackURL != null) && (callbackURL.length() == 0)) {
			boxTokenCacheModel.callbackURL = null;
		}

		boxTokenCacheModel.expired = getExpired();

		boxTokenCacheModel.repositoryId = getRepositoryId();

		return boxTokenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{boxTokenId=");
		sb.append(getBoxTokenId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", accessToken=");
		sb.append(getAccessToken());
		sb.append(", refreshToken=");
		sb.append(getRefreshToken());
		sb.append(", accessTokenExpiration=");
		sb.append(getAccessTokenExpiration());
		sb.append(", refreshTokenExpiration=");
		sb.append(getRefreshTokenExpiration());
		sb.append(", callbackURL=");
		sb.append(getCallbackURL());
		sb.append(", expired=");
		sb.append(getExpired());
		sb.append(", repositoryId=");
		sb.append(getRepositoryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.bvakili.portlet.integration.box.model.BoxToken");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>boxTokenId</column-name><column-value><![CDATA[");
		sb.append(getBoxTokenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessToken</column-name><column-value><![CDATA[");
		sb.append(getAccessToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refreshToken</column-name><column-value><![CDATA[");
		sb.append(getRefreshToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenExpiration</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenExpiration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refreshTokenExpiration</column-name><column-value><![CDATA[");
		sb.append(getRefreshTokenExpiration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callbackURL</column-name><column-value><![CDATA[");
		sb.append(getCallbackURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expired</column-name><column-value><![CDATA[");
		sb.append(getExpired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BoxToken.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BoxToken.class
		};
	private long _boxTokenId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _accessToken;
	private String _refreshToken;
	private long _accessTokenExpiration;
	private long _refreshTokenExpiration;
	private String _callbackURL;
	private boolean _expired;
	private boolean _originalExpired;
	private boolean _setOriginalExpired;
	private long _repositoryId;
	private long _originalRepositoryId;
	private boolean _setOriginalRepositoryId;
	private long _columnBitmask;
	private BoxToken _escapedModel;
}